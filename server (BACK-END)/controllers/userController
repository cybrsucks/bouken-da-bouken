const User = require("../model/userModel");
const session = require('express-session')
// const sendToken = require("../auth")
const jwt = require('jsonwebtoken');
const { response } = require("express");
const sql = require("../database.js");


exports.user_creation = (req, res) => {
    if (!req.body) {
        res.status(400).send({
            message: "Content can not be empty!"
        });
    }
    const user = new User({
        username: (req.body.username).trim(),
        email: req.body.email,
        password: req.body.password
    });
    User.create(user, (err, data) => {
        if (err){
            res.status(500).send({
            message:
                err
            });
        } else {
            res.status(200).send(data); // sends data to front-end
        }
    })
};


exports.user_All = (req, res) => {
    User.selectAll((err, data) => {
        if (err) {
            if (err.kind === "not_found") {
                res.status(404).send({
                message: "Somehow, listing all users has encounted a problem"
                });
            } else {
                res.status(500).send({
                message: "Somehow, listing all users has encounted a problem (2)"
                });
            }
        } else res.send(data); // sends data to front-end
    })
};

exports.login = (req, res) => {
    if (!req.body) {
        res.status(400).send({
            message: "Content can not be empty!"
        });
    }
    console.log(req.body.username, req.body.password);
    const username = req.body.username;
    console.log(username)
    const password = req.body.password;
    User.authentication(username, password, (err, data) => {
        if (err) {
            console.log(err);
            res.status(400).send("Invalid Credentials");
        } else {
            // console.log(data.token)
            res.cookie("JWT", data.token)
            res.send(data);
            // res.status(200).redirect("/dashboard");
        }
    })
};


exports.dashboard = (req, res) => {
    // const jwt_cookie = req.cookies.JWT;
    console.log("\n")
    console.log("INFO: req.cookies: ", req.cookies);
    // res.end()
    const token = req.cookies.JWT;
    console.log(token)
    if (token) {
        jwt.verify(token, 'hello', async (err, decodedToken) => {
            const currentUser = decodedToken.username;
            var adminView = false;

            sql.query(`SELECT groupings FROM user WHERE username = ?`, [currentUser], (err, res) => {
                const groupings = (res[0]).groupings;
                console.log("INFO: Current user's groupings: ", groupings);
                if (groupings.includes('ADMIN')) {
                    adminView = true;
                    console.log("oonga boonga adminView is", adminView)
                }else{
                    adminView = false;
                    console.log("oonga boonga adminView is", adminView)
                    // navigate("/login")
                }
            });

            console.log("INFO: Current user's decodedToken: ", decodedToken);
            // res.send({currentUser: currentUser, adminView: adminView});
            res.send(currentUser);
        });
    } else {
        console.log('JWT cookie not found')
    }
    return;
};


exports.logout = (req, res) => {
    res.cookie("JWT", 'none', {
        expires: new Date(Date.now()),
        httpOnly: true
    })
    res.status(200).json({
        success: true,
        message: 'Logged out successfully'
    })
    // res.redirect('/')
}


exports.user_details = (req, res) => {
    console.log("\n")
    console.log("INFO: req.cookies: ", req.cookies);
    const token = req.cookies.JWT;
    if (token) {
        jwt.verify(token, 'hello', async (err, decodedToken) => {
            const currentUsername = decodedToken.username;
            console.log("INFO: Current user's decodedToken: ", decodedToken);
            User.selectOne(currentUsername, (err, data) => {
                res.send(data);// sends data to front-end    
            });
        }) 
    } else {
        console.log('JWT cookie not found')
    }
};


exports.update_email = (req, res) => {
    console.log("\n")
    const newEmail = req.body.email;
    const token = req.cookies.JWT;
    if (token) {
        jwt.verify(token, 'hello', async (err, decodedToken) => {
            const currentUsername = decodedToken.username;
            console.log("INFO: Current user's decodedToken: ", decodedToken);
            User.updateEmail(currentUsername, newEmail, (err, data) => {
                res.send(newEmail)
            })
        });
    } else {
        console.log('JWT cookie not found')
    }
};


exports.change_password = (req, res) => {
    console.log("\n")
    console.log(req.body.password)
    const newPwd = req.body.password;
    console.log("INFO: req.cookies in changePwd: ", req.cookies);
    // res.end()
    const token = req.cookies.JWT;
    if (token) {
        jwt.verify(token, 'hello', async (err, decodedToken) => {
            const currentUsername = decodedToken.username;
            console.log("INFO: Current user's decodedToken: ", decodedToken);
            
            User.changePwd(currentUsername, newPwd, (err, data) => {
                res.send(newPwd)
            })
        });
    } else {
        console.log('JWT cookie not found')
    }
};


exports.user_statusList = (req, res) => {
    User.displayUserStatus((err, data) => {
        if (err) {
            res.status(404).send({
            message: "Somehow, listing all users has encounted a problem"
            });
        } else res.send(data); // sends data to front-end
    })
}


exports.user_status = (req, res) => {
    if (!req.body) {
        res.status(400).send({
            message: "Content can not be empty!"
        });
    }
    const status = req.body.active;
    const username = req.body.username;
    console.log("INFO: req.cookies in user_status: ", req.cookies);
    const token = req.cookies.JWT;
    if (token) {
        jwt.verify(token, 'hello', async (err, decodedToken) => {
            const currentUsername = decodedToken.username;
            console.log("INFO: Current user's decodedToken: ", decodedToken);
            
            User.status(username, status, (err, data) => {
                res.send(data)
            })
        });
    } else {
        console.log('JWT cookie not found')
    }
}


exports.adminUserProfiles = (req, res) => {
    User.adminViewAll((err, data) => {
        if (err) {
            if (err.kind === "not_found") {
                res.status(404).send({
                message: "Somehow, listing all users has encounted a problem"
                });
            } else {
                res.status(500).send({
                message: "Somehow, listing all users has encounted a problem (2)"
                });
            }
        } else res.send(data); // sends data to front-end
    })
};


exports.adminUpdateUserPwd = (req, res) => {
    if (!req.body) {
        res.status(400).send({
            message: "Content can not be empty!"
        });
    }
    const password = req.body.password;
    const username = req.body.username;
    const token = req.cookies.JWT;
    if (token) {
        jwt.verify(token, 'hello', async (err, decodedToken) => {
            console.log("INFO: Current user's decodedToken: ", decodedToken);
            User.changePwd(username, password, (err, data) => {
                console.log("INFO: Changed " + username + "'s password to " + password)
                res.send(data)
            })
        });
    } else {
        console.log('JWT cookie not found')
    }
};


exports.adminUpdateUserEmail = (req, res) => {
    if (!req.body) {
        res.status(400).send({
            message: "Content can not be empty!"
        });
    }
    const email = req.body.email;
    const username = req.body.username;
    const token = req.cookies.JWT;
    if (token) {
        jwt.verify(token, 'hello', async (err, decodedToken) => {
            console.log("INFO: Current user's decodedToken: ", decodedToken);
            User.updateEmail(username, email, (err, data) => {
                console.log("INFO: Changed " + username + "'s email to " + email)
                res.send(data)
            });
        });
    } else {
        console.log('JWT cookie not found')
    }
};