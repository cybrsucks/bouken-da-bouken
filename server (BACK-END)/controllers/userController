const User = require("../model/userModel");
const session = require('express-session')
// const sendToken = require("../auth")
const jwt = require('jsonwebtoken')

exports.user_creation = (req, res) => {
    if (!req.body) {
        res.status(400).send({
            message: "Content can not be empty!"
        });
    }
    const user = new User({
        username: req.body.username,
        age: req.body.age,
        email: req.body.email,
        password: req.body.password
    });
    User.create(user, (err, data) => {
        if (err){
            res.status(500).send({
            message:
                err.message || "Some error occurred while creating the User."
            });
        } else {
            // console.log("dory")
            // res.send("data"); 
            res.status(200).send(data); // sends data to front-end
        }
        
    })
};

exports.user_All = (req, res) => {
    User.selectAll((err, data) => {
        if (err) {
            if (err.kind === "not_found") {
                res.status(404).send({
                message: "Somehow, listing all users has encounted a problem"
                });
            } else {
                res.status(500).send({
                message: "Somehow, listing all users has encounted a problem (2)"
                });
            }
        } else res.send(data); // sends data to front-end
    })
};

exports.login = (req, res) => {
    if (!req.body) {
        res.status(400).send({
            message: "Content can not be empty!"
        });
    }
    // console.log(req.body);
    username = req.body.username;
    password = req.body.password;
    User.authentication(username, password, (err, data) => {
        if (err) {
            console.log(err);
            res.status(400).send("Invalid Credentials");
        } else {
            res.cookie("JWT", data.token)
            // res.status(200).send(data).cookie("JWT", data.token); // sends data to front-end
            // res.status(200).send(data); // sends data to front-end
            res.status(200).redirect("/dashboard");
        }
    })
};

exports.dashboard = (req, res) => {
    // const jwt_cookie = req.cookies.JWT;
    console.log("\n")
    console.log("INFO: req.cookies: ", req.cookies);
    // res.end()
    const token = req.cookies.JWT;
    console.log(token)
    if (token) {
        jwt.verify(token, 'hello', async (err, decodedToken) => {
            const currentUser = decodedToken.username;
            console.log("INFO: Current user's decodedToken: ", decodedToken);
            res.send(currentUser);
        });
    } else {
        console.log('JWT cookie not found')
    }
    return;
};

exports.logout = (req, res) => {
    // console.log("here")
    res.cookie("JWT", 'none', {
        expires: new Date(Date.now()),
        httpOnly: true
    })
    res.status(200).json({
        success: true,
        message: 'Logged out successfully'
    })
    res.redirect('/')
}

// working on this function  here
exports.user_details = (req, res) => {
    console.log("\n")
    // console.log("xzxxzxzxxzxz")
    console.log("INFO: req.cookies: ", req.cookies);
    const token = req.cookies.JWT;
    if (token) {
        jwt.verify(token, 'hello', async (err, decodedToken) => {
            const currentUsername = decodedToken.username;
            console.log("INFO: Current user's decodedToken: ", decodedToken);
            // console.log(currentUsername);
        
            User.selectOne(currentUsername, (err, data) => {
                res.send(data);// sends data to front-end    
            });
        }) 
    } else {
        console.log('JWT cookie not found')
    }
};

// working on this function  here
exports.update_email = (req, res) => {
    console.log("\n")
    console.log(req.body.email)
    const newEmail = req.body.email;
    // console.log("INFO: req.cookies: ", req.cookies);
    // res.end()
    const token = req.cookies.JWT;
    // console.log(token)
    if (token) {
        jwt.verify(token, 'hello', async (err, decodedToken) => {
            const currentUsername = decodedToken.username;
            console.log("INFO: Current user's decodedToken: ", decodedToken);
            
            User.updateEmail(currentUsername, newEmail, (err, data) => {
                res.send(newEmail)
                
            })
        });
    } else {
        console.log('JWT cookie not found')
    }

    console.log("hfaowlfhawoifhwalfawlkifawlfia")
};

exports.change_pwd = (req, res) => {};

